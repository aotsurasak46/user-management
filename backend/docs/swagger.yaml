definitions:
  dto.ConversationResponse:
    properties:
      last_message:
        type: string
      timestamp:
        type: string
      user:
        $ref: '#/definitions/dto.UserResponse'
    type: object
  dto.LoginRequest:
    properties:
      email:
        type: string
      password:
        type: string
    type: object
  dto.MessageResponse:
    properties:
      ID:
        type: integer
      content:
        type: string
      created_at:
        type: string
      deleted_at:
        type: string
      from:
        $ref: '#/definitions/dto.UserResponse'
      from_id:
        type: integer
      timestamp:
        type: string
      to:
        $ref: '#/definitions/dto.UserResponse'
      to_id:
        type: integer
      updated_at:
        type: string
    type: object
  dto.RegisterRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
    type: object
  dto.UserCreateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      password:
        type: string
      role:
        type: string
    type: object
  dto.UserResponse:
    properties:
      ID:
        type: integer
      created_at:
        type: string
      deleted_at:
        type: string
      email:
        type: string
      name:
        type: string
      role:
        type: string
      updated_at:
        type: string
    type: object
  dto.UserUpdateRequest:
    properties:
      email:
        type: string
      name:
        type: string
      role:
        type: string
    type: object
host: localhost:8080
info:
  contact: {}
  description: This is a server for managing users, authentication, and chat functionality.
  title: User Management API
  version: "1.0"
paths:
  /api/v1/check-auth:
    get:
      description: Verify if the user is authenticated and retrieve user details
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              authenticated:
                type: boolean
              user:
                properties:
                  email:
                    type: string
                  id:
                    type: integer
                  name:
                    type: string
                  role:
                    type: string
                type: object
            type: object
        "401":
          description: User not found or unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Check Authentication
      tags:
      - authentication
  /api/v1/conversations:
    get:
      consumes:
      - application/json
      description: Get conversations of user that include the latest message exchanged
        with each participant
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.ConversationResponse'
            type: array
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get conversations of user
      tags:
      - chat
  /api/v1/login:
    post:
      consumes:
      - application/json
      description: Authenticate a user with email and password
      parameters:
      - description: Login Credentials
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/dto.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: Login successful
          schema:
            properties:
              message:
                type: string
              user:
                $ref: '#/definitions/dto.UserResponse'
            type: object
        "400":
          description: Bad request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Invalid email or password
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: User login
      tags:
      - authentication
  /api/v1/logout:
    post:
      description: Logout a user by clearing the JWT cookie
      responses:
        "200":
          description: Logout successful
          schema:
            properties:
              message:
                type: string
            type: object
      summary: User logout
      tags:
      - authentication
  /api/v1/messages/:userId:
    get:
      consumes:
      - application/json
      description: Get all message in chat of user with another user
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.MessageResponse'
            type: array
        "400":
          description: Bad request, User ID is missing in the request
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get chat history of user
      tags:
      - chat
  /api/v1/register:
    post:
      consumes:
      - application/json
      description: Create a new user with name, email and password
      parameters:
      - description: User Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.RegisterRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request body
          schema:
            properties:
              error:
                type: string
            type: object
        "401":
          description: Email already exists
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: User Register
      tags:
      - authentication
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Retrieve a list of all users from the database
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            items:
              $ref: '#/definitions/dto.UserResponse'
            type: array
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get all users
      tags:
      - users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided information (Admin only)
      parameters:
      - description: User Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserCreateRequest'
      produces:
      - application/json
      responses:
        "201":
          description: Created
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Invalid request body, invalid role or email already exists
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Create a new user
      tags:
      - users
  /api/v1/users/:id:
    delete:
      consumes:
      - application/json
      description: Delete a user from the database by using their id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            properties:
              message:
                type: string
            type: object
        "400":
          description: Bad request or User ID is missing
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Delete User by id (Admin only)
      tags:
      - users
    get:
      consumes:
      - application/json
      description: Retrieve a user information from the database by using id
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad request or User ID is missing
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Get user by id
      tags:
      - users
    put:
      consumes:
      - application/json
      description: Update a user information by using id (Admin only)
      parameters:
      - description: User id
        in: path
        name: id
        required: true
        type: integer
      - description: User Information
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/dto.UserUpdateRequest'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.UserResponse'
        "400":
          description: Bad request, invalid request body, invalid role, email is existed
            or invalid role
          schema:
            properties:
              error:
                type: string
            type: object
        "404":
          description: User not found
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: Update User by id
      tags:
      - users
  /ws/chat:
    get:
      description: Upgrades to WebSocket for chat. After connection, let client send
        JSON messages.
      produces:
      - application/json
      responses:
        "401":
          description: Unauthorized
          schema:
            properties:
              error:
                type: string
            type: object
        "500":
          description: Internal server error
          schema:
            properties:
              error:
                type: string
            type: object
      summary: WebSocket chat connection
      tags:
      - chat
schemes:
- http
securityDefinitions:
  ApiKeyAuth:
    in: header
    name: Authorization
    type: apiKey
swagger: "2.0"
